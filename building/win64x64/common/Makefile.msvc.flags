#############################################################################
# Common Makefile for Win64 VM using Clang/MSVC, e.g. 2017 Community, gnu make
# and the Windows 10 SDK.
# Copyright (c) 2020 3D Immersive Collaboration Consulting, LLC
#############################################################################

ARCH:=x64
export ARCH

# Find out where the MSVC tools are if not already defined.
ifeq ($(VCToolsInstallDir),)
# For wildcard we /must/ escape spaces and /must not/ escape parentheses.
RT:=C:/Program\ Files\ (x86)/Microsoft\ Visual\ Studio/2017/Community/VC/Tools/MSVC
VCToolsInstallDir:=$(wildcard $(RT)/*)
else
# If VCToolsInstallDir is taken from the environment then modify it to use the
# Unix / file separator, so that subsequent rules work in both cygwin or cmd
override VCToolsInstallDir:=$(subst \,/,$(VCToolsInstallDir))
endif
$(info VCToolsInstallDir found to be $(VCToolsInstallDir))
override VCINSTALLDIR:=$(subst \,/,$(VCINSTALLDIR))
# For wildcard we /must/ escape spaces and /must not/ escape parentheses.
# For shell we escape spaces and parentheses.
# It shouldn't be this hard, but it is...
override VCINSTALLDIR:=$(shell echo "$(VCINSTALLDIR)" | sed 's/ /\\ /g')
override VCINSTALLDIRSH:=$(shell echo "$(VCINSTALLDIR)" | sed 's/[()]/\\&/g')

#############################################################################
# C compiler settings assuming Clang & Visual C++ 2017 Community Edition
#
# use clang.exe from either C:\Program Files\LLVM or C:\LLVM
# We use clang rather than clang-cl or MSVC because
#	clang-cl ignores /Oy-
#	MSVC has a very poor preprocessor

$(info VCINSTALLDIR=$(VCINSTALLDIR))
$(info VCINSTALLDIRSH=$(VCINSTALLDIRSH))

CC:="C:/LLVM/bin/clang.exe"
Clang:=Clang
undefine MSVC
export TOOLPREFIX
$(info CC=$(CC))
AS:=ml64


ifeq ($(WindowsSdkDir),)
WindowsSdkDir:=C:/Program Files (x86)/Windows Kits/10/
else
override WindowsSdkDir:=$(subst \,/,$(WindowsSdkDir))
endif
ifeq ($(WindowsSDKVersion),)
WindowsSDKVersion:=10.0.15063.0
else
WindowsSDKVersion:=$(subst \,,$(WindowsSDKVersion))
endif
ifeq ($(INCLUDE),)
INCLUDE:=$(VCToolsInstallDir)/ATLMFC/include;$(VCToolsInstallDir)/include;$(WindowsSdkDir)/include/$(WindowsSDKVersion)/shared;$(WindowsSdkDir)/include/$(WindowsSDKVersion)/ucrt;$(WindowsSdkDir)/include/$(WindowsSDKVersion)/um;$(WindowsSdkDir)/include/$(WindowsSDKVersion)/winrt
INCLUDE:=$(subst //,/,$(INCLUDE))
INCLUDE:=$(subst /,\,$(INCLUDE))
#$(info INCLUDE is $(INCLUDE))
endif
MSVCINCLUDES:=-I"$(subst \,/,$(subst ;," -I",$(INCLUDE)))"
#$(info MSVCINCLUDES is $(MSVCINCLUDES))

# DO NOT USE := FOR OFLAGS BECAUSE SOME PLUGINS REDEFINE THIS!!
# -Z7 debug info in files; -Zi debug info in PDB
# Turn off BUFFER_SECURITY for functional setjmp/longjmp
BUFFER_SECURITY:=-fno-stack-protector -D_CRT_SECURE_NO_WARNINGS
# clang supports both -fno-omit-frame-pointer and -fno-omit-leaf-frame-pointer.
# for exception handing we require a frame pointer (for unwind etc). So supply
# -fno-omit-frame-pointer but not -fno-omit-leaf-frame-pointer with the intent
# that clang does use a frame pointer in all non-leaf functions, but does not
# use a frame pointer in leaf functions.
#
# Alas clang-cl supports only /Oy & /Oy- but ignores /Oy- (!!)
FRAME_POINTER_FLAGS:=-fno-omit-frame-pointer -DcFramePointerInUse=1
EXCEPTION_FLAGS:=-fexceptions
CXX_EXCEPTION_FLAGS:=-fexceptions -fcxx-exceptions

PRODUCTION_OFLAGS:=-O2 -finline-hint-functions $(FRAME_POINTER_FLAGS) $(BUFFER_SECURITY)
ASSERT_OFLAGS:=-Os -fno-builtin $(FRAME_POINTER_FLAGS) $(BUFFER_SECURITY)
DEBUG_OFLAGS:=-O0 $(FRAME_POINTER_FLAGS) $(BUFFER_SECURITY)

DASH_O:=-o
OFLAGS= -O2 $(FRAME_POINTER_FLAGS) $(BUFFER_SECURITY)
CFLAGS=	-MD -DLLP64=1 -DWIN64=1 -g3 $(OFLAGS) \
	-Dalloca=_alloca -Dhuge=my_huge \
	$(EXCEPTION_FLAGS) $(XCFLAGS) $(NOBUILTIN) $(WARNINGS)
CXXFLAGS=-MD -DLLP64=1 -DWIN64=1 -g3 $(OFLAGS) \
	-Dalloca=_alloca -Dhuge=my_huge \
	$(CXX_EXCEPTION_FLAGS) $(XCFLAGS) $(NOBUILTIN) $(WARNINGS)
# Make all setjmp/longjmp varieties to our _setjmp/_longjmp in _setjmp-x86.asm
JMPDEFS:=-Dsetjmp=_setjmp -Dlongjmp=_longjmp -D_siglongjmp=_longjmp

# Do _not_ define NDEBUG.  The entire point of the msvc build is to debug with
# MSVC and defining NDEBUG installs a default catch-everything exception handler
# that effectively disables debugging.
# XDEFS=	-DSQUEAK_BUILTIN_PLUGIN
# Include the Microsoft headers and any extras.
# Put -I. last because boost includes bizarreness such as
# include <list> which will include a local file called list if -I. comes
# early in the include path.  Fragile.
# override INCLUDES:= $(filter-out -I., $(INCLUDES)) $(MSVCINCLUDES) $(XINC) -I.
INCLUDES:= $(filter-out -I., $(INCLUDES)) $(MSVCINCLUDES) $(XINC) -I.
