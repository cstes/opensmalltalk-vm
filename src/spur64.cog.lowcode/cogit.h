/* Automatically generated by
	CCodeGenerator VMMaker.oscog-eem.3158 uuid: fb484548-01a4-4d5e-a515-a0baa462be58
 */


/*** Function Prototypes ***/


#if !PRODUCTION && defined(PlatformNoDbgRegParms)
# define NoDbgRegParms PlatformNoDbgRegParms
#endif

#if !defined(NoDbgRegParms)
# define NoDbgRegParms /*empty*/
#endif



#if !defined(NeverInline)
# define NeverInline /*empty*/
#endif

extern sqInt abortOffset(void);
extern void addCogMethodsToHeapMap(void);
extern sqInt bytecodePCForstartBcpcin(sqInt mcpc, sqInt startbcpc, CogBlockMethod *cogMethod);
extern void callCogCodePopReceiver(void);
extern void callCogCodePopReceiverAndClassRegs(void);
extern void ceFree(void *pointer);
extern sqInt checkIntegrityOfObjectReferencesInCode(sqInt gcModes);
extern char * codeEntryFor(char *address);
extern char * codeEntryNameFor(char *address);
extern sqInt cogCodeBase(void);
extern sqInt cogCodeConstituents(sqInt withDetails);
extern CogMethod * cogFullBlockMethodnumCopied(sqInt aMethodObj, sqInt numCopied);
extern void cogitPostGCAction(sqInt gcMode);
extern sqInt cogMethodDoesntLookKosher(CogMethod *cogMethod);
extern CogMethod * cogMNUPICSelectorreceivermethodOperandnumArgs(sqInt selector, sqInt rcvr, sqInt methodOperand, sqInt numArgs);
extern CogMethod * cogselector(sqInt aMethodObj, sqInt aSelectorOop);
extern void compactCogCompiledCode(void);
extern sqInt defaultCogCodeSize(void);
extern void enterCogCodePopReceiver(void);
extern CogBlockMethod * findMethodForStartBcpcinHomeMethod(sqInt startbcpc, CogMethod *cogMethod);
extern void followForwardedLiteralsIn(CogMethod *cogMethod);
extern void followForwardedMethods(void);
extern void followMovableLiteralsAndUpdateYoungReferrers(void);
extern void freeCogMethod(CogMethod *cogMethod);
extern void freeUnmarkedMachineCode(void);
extern void initializeCodeZoneFromupTo(sqInt startAddress, sqInt endAddress);
extern sqInt isPCWithinMethodZone(void *address);
extern sqInt isSendReturnPC(sqInt retpc);
extern void linkSendAtintooffsetreceiver(sqInt callSiteReturnAddress, CogMethod *sendingMethod, CogMethod *targetMethod, sqInt theEntryOffset, sqInt receiver);
extern void mapObjectReferencesInMachineCode(sqInt gcMode);
extern void markAndTraceMachineCodeOfMarkedMethods(void);
extern void markMethodAndReferents(CogBlockMethod *aCogMethod);
extern usqInt maxCogMethodAddress(void);
extern usqInt mcPCForBackwardBranchstartBcpcin(sqInt bcpc, sqInt startbcpc, CogBlockMethod *cogMethod);
extern sqInt mnuOffset(void);
extern sqInt patchToOpenPICFornumArgsreceiver(sqInt selector, sqInt numArgs, sqInt receiver);
extern void printCogMethodFor(void *address);
extern void printTrampolineTable(void);
extern sqInt recordPrimTraceFunc(void);
extern void setBreakMethod(sqInt anObj);
extern void setSelectorOfto(CogMethod *cogMethod, sqInt aSelectorOop);
extern sqInt traceLinkedSendOffset(void);
extern void unlinkAllSends(void);
extern void unlinkSendsLinkedForInvalidClasses(void);
extern void unlinkSendsOfisMNUSelector(sqInt selector, sqInt isMNUSelector);
extern void unlinkSendsToFree(void);
extern void unlinkSendsToMethodsSuchThatAndFreeIf(sqInt (*criterion)(CogMethod *), sqInt freeIfTrue);
extern void unlinkSendsToandFreeIf(sqInt targetMethodObject, sqInt freeIfTrue);
extern void voidCogCompiledCode(void);
extern CogMethod * cogMethodContaining(usqInt mcpc);
extern sqInt kosherYoungReferrers(void);
extern CogMethod * methodFor(void *address);
extern sqInt methodsCompiledToMachineCodeInto(sqInt arrayObj);
extern sqInt numMethods(void);
extern sqInt numMethodsOfType(sqInt cogMethodType);
extern void printCogMethods(void);
extern void printCogMethodsOfType(sqInt cmType);
extern void printCogMethodsWithMethod(sqInt methodOop);
extern void printCogMethodsWithPrimitive(sqInt primIdx);
extern void printCogMethodsWithSelector(sqInt selectorOop);
extern void printCogYoungReferrers(void);
extern sqInt printOpenPICList(void);
extern sqInt pruneYoungReferrers(void);
EXPORT(char *) whereIsMaybeCodeThing(sqInt anOop);
extern sqInt cogMethodHasExternalPrim(CogMethod *aCogMethod);
extern sqInt cogMethodHasMachineCodePrim(CogMethod *aCogMethod);
extern sqInt genQuickReturnConst(void);
extern sqInt genQuickReturnInstVar(void);
extern sqInt genQuickReturnSelf(void);
extern sqInt mapPCDataForinto(CogMethod *cogMethod, sqInt arrayObj);
extern double getCogCodeZoneThreshold(void);
extern sqInt setCogCodeZoneThreshold(double ratio);
extern void callCogCodePopReceiverArg0Regs(void);
extern void callCogCodePopReceiverArg1Arg0Regs(void);


/*** Global Variables ***/
extern sqInt blockNoContextSwitchOffset;
extern sqInt breakPC;
extern sqInt cbEntryOffset;
extern sqInt cbNoSwitchEntryOffset;
extern sqInt ceBaseFrameReturnTrampoline;
extern void (*ceCall0ArgsPIC)(void);
extern void (*ceCall1ArgsPIC)(void);
extern void (*ceCall2ArgsPIC)(void);
extern void (*ceCallCogCodePopReceiverAndClassRegs)(void);
extern void (*ceCallCogCodePopReceiverArg0Regs)(void);
extern void (*ceCallCogCodePopReceiverArg1Arg0Regs)(void);
extern void (*ceCallCogCodePopReceiverReg)(void);
extern sqInt ceCannotResumeTrampoline;
extern void (*ceCaptureCStackPointers)(void);
extern sqInt ceCheckForInterruptTrampoline;
extern void (*ceEnterCogCodePopReceiverReg)(void);
extern usqIntptr_t (*ceGetFP)(void);
extern usqIntptr_t (*ceGetSP)(void);
extern void (*ceInvokeInterpret)(void);
extern sqInt ceReturnToInterpreterTrampoline;
#if COGMTVM
extern usqIntptr_t (*ceTryLockVMOwner)(usqIntptr_t);
#endif
#if !defined(cFramePointerInUse)
extern sqInt cFramePointerInUse;
#endif
extern sqInt cmEntryOffset;
extern sqInt cmNoCheckEntryOffset;
extern usqInt methodZoneBase;
extern sqInt missOffset;
extern void (*realCECallCogCodePopReceiverAndClassRegs)(void);
extern void (*realCECallCogCodePopReceiverArg0Regs)(void);
extern void (*realCECallCogCodePopReceiverArg1Arg0Regs)(void);
extern void (*realCECallCogCodePopReceiverReg)(void);
extern void (*realCEEnterCogCodePopReceiverReg)(void);
extern int traceFlags ;
extern sqInt traceStores;


/*** Macros ***/
#define blockAlignment() 8
#define breakOnImplicitReceiver() (traceFlags & 64)
#define ceBaseFrameReturnPC() ceBaseFrameReturnTrampoline
#define ceCannotResumePC() ((usqInt)ceCannotResumeTrampoline)
#define ceReturnToInterpreterPC() ((usqInt)ceReturnToInterpreterTrampoline)
#define entryOffset() cmEntryOffset
#define interpretOffset() missOffset
#define maxCogCodeSize() (16*1024*1024)
#define minCogMethodAddress() methodZoneBase
#define noCheckEntryOffset() cmNoCheckEntryOffset
#define noContextSwitchBlockEntryOffset() blockNoContextSwitchOffset
#define printOnTrace() (traceFlags & 1)
#define recordBlockTrace() (traceFlags & 4)
#define recordEventTrace() (traceFlags & 16)
#define recordFastCCallPrimTrace() (traceFlags & 512)
#define recordOverflowTrace() (traceFlags & 32)
#define recordPrimTrace() (traceFlags & 8)
#define recordSendTrace() (traceFlags & 2)
#define tryLockVMOwnerTo(value) ceTryLockVMOwner(value)
#define numRegArgs() 2
#define fullBlockEntryOffset() cbEntryOffset
#define fullBlockNoContextSwitchEntryOffset() cbNoSwitchEntryOffset


/*** Constants ***/
#define ABICalleeSavedRegisterMask 0xF0C8
#define ABICallerSavedRegisterMask 0xF07
#define ABIResultReg 0
#undef ABIResultRegHigh
#define ActiveProcessIndex 1
#define AddCqR 106
#define AddCqRR 123
#define AddCwR 114
#define AddcCqR 120
#define AddcRR 119
#define AddRdRd 132
#define AddRR 100
#define AddRRR 126
#define AddRsRs 139
#define AlignmentNops 3
#define AndCqR 108
#define AndCqRR 124
#define AndCwR 116
#define AndRR 102
#define Arg0Reg 1
#define Arg1Reg 2
#define ArithmeticShiftRightCqR 91
#define ArithmeticShiftRightCqRR 128
#define ArithmeticShiftRightRR 92
#define BadRegisterSet 1
#define BytecodeSetHasDirectedSuperSend 1
#define BytecodeSetHasExtensions 1
#define Call 6
#define CallerSavedRegisterMask 0x706
#define CallFull 7
#define CallR 8
#define CharacterTable null
#define CharacterValueIndex 0
#define ClassAlien 52
#define ClassArray 7
#define ClassArrayCompactIndex 51
#define ClassBitmap 4
#define ClassBitmapCompactIndex 53
#define ClassBlockClosure 36
#define ClassBlockClosureCompactIndex 37
#define ClassBlockContext 11
#define ClassBlockContextCompactIndex 0
#define ClassByteArray 26
#define ClassByteArrayCompactIndex 50
#define ClassByteString 6
#define ClassByteStringCompactIndex 52
#define ClassCharacter 19
#define ClassDoubleByteArray 31
#define ClassDoubleWordArray 33
#define ClassExternalAddress 43
#define ClassExternalData 45
#define ClassExternalFunction 46
#define ClassExternalLibrary 47
#define ClassExternalStructure 44
#define ClassFloat 9
#define ClassFloatCompactIndex 34
#define ClassFullBlockClosure 37
#define ClassFullBlockClosureCompactIndex 38
#define ClassLargeNegativeInteger 42
#define ClassLargeNegativeIntegerCompactIndex 32
#define ClassLargePositiveInteger 13
#define ClassLargePositiveIntegerCompactIndex 33
#define ClassMessage 15
#define ClassMessageCompactIndex 35
#define ClassMethodContext 10
#define ClassMethodContextCompactIndex 36
#define ClassPoint 12
#define ClassPointCompactIndex 54
#define ClassReg 8
#define ClassSemaphore 18
#define ClassSmallInteger 5
#define ClassString 6
#define ClassUnsafeAlien 54
#define ClassWeakFinalizer 55
#define ClassWordArray 32
#define ClosureFirstCopiedValueIndex 3
#define ClosureIndex 4
#define ClosureNumArgsIndex 2
#define ClosureOuterContextIndex 0
#define ClosureStartPCIndex 1
#define ClzRR 157
#define CMBlock 3
#define CMClosedPIC 4
#define CMFree 1
#define CMMaxUsageCount 7
#define CMMethod 2
#define CMOpenPIC 5
#define CmpC32R 113
#define CmpCqR 105
#define CmpCwR 112
#define CmpRdRd 131
#define CmpRR 99
#define CmpRsRs 138
#define CompactClasses 28
#define CompletePrimitive 4
#define ConstMinusOne 0xFFFFFFFFFFFFFFF9ULL
#define ConstOne 9
#define ConstTwo 17
#define ConstZero 1
#define ConvertRdR 146
#define ConvertRdRs 148
#define ConvertRRd 145
#define ConvertRRs 150
#define ConvertRsR 149
#define ConvertRsRd 147
#define CtxtTempFrameStart 6
#define DisownVMForFFICall 16
#define DisownVMForThreading 32
#define DivRdRd 135
#define DivRsRs 142
#define DoAssertionChecks (!PRODUCTION)
#define DoExpensiveAssertionChecks 0
#define DPFPReg0 0
#define DPFPReg1 1
#define DPFPReg10 10
#define DPFPReg11 11
#define DPFPReg12 12
#define DPFPReg13 13
#define DPFPReg14 14
#define DPFPReg15 15
#define DPFPReg2 2
#define DPFPReg3 3
#define DPFPReg4 4
#define DPFPReg5 5
#define DPFPReg6 6
#define DPFPReg7 7
#define DPFPReg8 8
#define DPFPReg9 9
#define EncounteredUnknownBytecode -6
#define ExcessSignalsIndex 2
#define ExternalObjectsArray 38
#define Extra0Reg 7
#define Extra1Reg 6
#define Extra2Reg 12
#define Extra3Reg 13
#define Extra4Reg 14
#define Extra5Reg 15
#undef Extra6Reg
#undef Extra7Reg
#undef Extra8Reg
#define FalseObject 1
#define FastCPrimitiveAlignForFloatsFlag 2
#define FastCPrimitiveFlag 1
#define Fill32 4
#define FirstJump 12
#define FirstLinkIndex 0
#define FirstShortJump 16
#define ForeignCallbackProcess 56
#undef FoxCallerContext
#define FoxCallerSavedIP 8
#undef FoxFrameFlags
#define FoxIFReceiver -40
#define FoxIFrameFlags -24
#define FoxIFSavedIP -32
#define FoxMethod -8
#define FoxMFReceiver -24
#undef FoxReceiver
#define FoxSavedFP 0
#define FoxThisContext -16
#define FPReg 5
#undef FrameSlots
#define FullClosureCompiledBlockIndex 1
#define FullClosureFirstCopiedValueIndex 4
#define FullClosureReceiverIndex 3
#define GCCheckFreeSpace 32
#define GCCheckImageSegment 16
#define GCCheckPrimCall 128
#define GCCheckShorten 64
#define GCModeBecome 8
#define GCModeFull 1
#define GCModeIncremental 4
#define GCModeNewSpace 2
#define HashMultiplyConstant 1664525
#define HashMultiplyMask 0xFFFFFFF
#define HeaderIndex 0
#define IFrameSlots 7
#define InFullBlock 2
#define InstanceSpecificationIndex 2
#define InstructionPointerIndex 1
#define InsufficientCodeSpace -2
#define InVanillaBlock 1
#define Jump 16
#define JumpAbove 33
#define JumpAboveOrEqual 32
#define JumpBelow 31
#define JumpBelowOrEqual 34
#define JumpCarry 25
#define JumpFPEqual 35
#define JumpFPGreater 39
#define JumpFPGreaterOrEqual 40
#define JumpFPLess 37
#define JumpFPLessOrEqual 38
#define JumpFPNotEqual 36
#define JumpFPOrdered 41
#define JumpFPUnordered 42
#define JumpFull 12
#define JumpGreater 29
#define JumpGreaterOrEqual 28
#define JumpLess 27
#define JumpLessOrEqual 30
#define JumpLong 13
#define JumpLongNonZero 15
#define JumpLongZero 14
#define JumpMulOverflow 23
#define JumpNegative 19
#define JumpNoCarry 26
#define JumpNoMulOverflow 24
#define JumpNonNegative 20
#define JumpNonZero 18
#define JumpNoOverflow 22
#define JumpOverflow 21
#define JumpR 10
#define JumpZero 17
#define KeyIndex 0
#define Label 1
#define LargeContextBit 0x100000
#define LargeContextSize bogus
#define LargeContextSlots 62
#define LastJump 42
#define LastLinkIndex 1
#define LastRTLCode 160
#undef LinkReg
#define Literal 2
#define LiteralStart 1
#define LoadEffectiveAddressMwrR 88
#define LogicalShiftLeftCqR 95
#define LogicalShiftLeftCqRR 129
#define LogicalShiftLeftRR 96
#define LogicalShiftRightCqR 93
#define LogicalShiftRightCqRR 130
#define LogicalShiftRightRR 94
#define LookupRuleDynamicSuper 0x101
#define LookupRuleImplicit 0x100
#define LookupRuleMNU 259
#define LookupRuleOrdinary 258
#define LookupRuleSelf 0
#define LowcodeContextMark 60
#define LowcodeNativeContextClass 61
#define MaxLiteralCountForCompile 60
#define MaxMethodSize 65535
#define MaxNegativeErrorCode -8
#define MaxNumArgs 15
#define MaxStackCheckOffset 0xFFF
#define MessageArgumentsIndex 1
#define MessageLookupClassIndex 2
#define MessageSelectorIndex 0
#define MethodArrayIndex 1
#define MethodCacheClass 2
#define MethodCacheEntries 0x400
#define MethodCacheEntrySize 4
#define MethodCacheMask 0xFFC
#define MethodCacheMethod 3
#define MethodCachePrim null
#define MethodCachePrimFunction 4
#define MethodCacheSelector 1
#define MethodCacheSize 4096
#define MethodDictionaryIndex 1
#define MethodIndex 3
#define MethodTooBig -4
#define MFMethodFlagHasContextFlag 1
#define MFMethodFlagIsBlockFlag 2
#define MFMethodFlagsMask 0x7
#define MFMethodMask -0x8
#define MFrameSlots 5
#define MoveA32R 45
#define MoveAbR 48
#define MoveAwR 44
#define MoveC32R 71
#define MoveCqR 69
#define MoveCwR 70
#define MoveM16rR 57
#define MoveM32rR 61
#define MoveM32rRs 78
#define MoveM64rRd 75
#define MoveM8rR 54
#define MoveMbrR 65
#define MoveMs8rR 55
#define MoveMwrR 50
#define MovePerfCnt64RL 159
#define MovePerfCnt64RRL 158
#define MoveRA32 47
#define MoveRAb 49
#define MoveRAw 46
#define MoveRdM64r 76
#define MoveRdR 73
#define MoveRdRd 74
#define MoveRM16r 58
#define MoveRM32r 62
#define MoveRM8r 56
#define MoveRMbr 66
#define MoveRMwr 51
#define MoveRR 43
#define MoveRRd 72
#define MoveRsM32r 79
#define MoveRsRs 77
#define MoveRX16rR 60
#define MoveRX32rR 64
#define MoveRXbrR 68
#define MoveRXwrR 53
#define MoveX16rRR 59
#define MoveX32rRR 63
#define MoveXbrRR 67
#define MoveXwrRR 52
#define MulRdRd 134
#define MulRsRs 141
#define MyListIndex 3
#define NativePopR 84
#define NativePushR 85
#define NativeRetN 86
#define NativeSPReg 4
#define NegateR 89
#define NewsqueakV4BytecodeSet 0
#define NextLinkIndex 0
#define NilObject 0
#define Nop 5
#define NoReg -1
#define NotFullyInitialized -1
#define NotR 90
#define NSMethodCacheActualReceiver 7
#define NSMethodCacheCallingMethod 3
#define NSMethodCacheClassTag 2
#define NSMethodCacheDepthOrLookupRule 4
#define NSMethodCacheEntries 0x200
#define NSMethodCacheEntrySize 8
#define NSMethodCacheMask 0xFF8
#define NSMethodCachePrimFunction 6
#define NSMethodCacheSelector 1
#define NSMethodCacheSize 4096
#define NSMethodCacheTargetMethod 5
#define NumFloatRegisters 16
#define NumRegisters 16
#define NumSendTrampolines 4
#define OrCqR 109
#define OrCqRR 125
#define OrCwR 117
#define OrRR 103
#undef PCReg
#define PopR 80
#define PrefetchAw 87
#define PrimCallCollectsProfileSamples 16
#define PrimCallIsExternalPrim 32
#define PrimCallMayEndureCodeCompaction 8
#define PrimCallNeedsNewMethod 4
#define PrimCallOnSmalltalkStack 1
#define PrimCallOnSmalltalkStackAlign2x 2
#define PrimNumberExternalCall 117
#define PrimNumberFFICall 120
#define PrimNumberHandlerMarker 199
#define PrimNumberNoContextSwitchMarker 123
#define PrimNumberUnwindMarker 198
#define PriorityIndex 2
#define ProcessInExternalCodeTag 40
#define ProcessListsIndex 0
#define ProcessSignalingLowSpace 22
#define PushCq 82
#define PushCw 83
#define PushR 81
#define ReceiverIndex 5
#define ReceiverResultReg 9
#define RetN 9
#define RISCTempReg 11
#define RotateLeftCqR 97
#define RotateRightCqR 98
#define SchedulerAssociation 3
#define SelectorAboutToReturn 48
#define SelectorAttemptToAssign 50
#define SelectorCannotInterpret 34
#define SelectorCannotReturn 21
#define SelectorCounterTripped 58
#define SelectorDoesNotUnderstand 20
#define SelectorInvokeCallback 53
#define SelectorMustBeBoolean 25
#define SelectorRunWithIn 49
#define SelectorSistaTrap 59
#define SelectorStart 2
#define SelectorUnknownBytecode 57
#define SenderIndex 0
#define SendNumArgsReg 10
#define ShouldNotJIT -8
#define SignExtend16RR 152
#define SignExtend32RR 153
#define SignExtend8RR 151
#define SistaV1BytecodeSet 1
#define SmallContextSize bogus
#define SmallContextSlots 22
#define SPReg 4
#define SpecialSelectors 23
#define SqrtRd 136
#define SqrtRs 143
#define SqueakV3PlusClosuresBytecodeSet 1
#define SSBaseOffset 1
#define SSConstant 2
#define SSConstantFloat32 15
#define SSConstantFloat64 16
#define SSConstantInt32 13
#define SSConstantInt64 14
#define SSConstantNativePointer 17
#define SSIllegal 0
#define SSNativeRegister 5
#define SSRegister 3
#define SSRegisterDoubleFloat 7
#define SSRegisterPair 6
#define SSRegisterSingleFloat 8
#define SSSpill 4
#define SSSpillFloat32 11
#define SSSpillFloat64 12
#define SSSpillInt64 10
#define SSSpillNative 9
#define StackPointerIndex 2
#define Stop 11
#define StreamArrayIndex 0
#define StreamIndexIndex 1
#define StreamReadLimitIndex 2
#define StreamWriteLimitIndex 3
#define SubbCqR 122
#define SubbRR 121
#define SubCqR 107
#define SubCwR 115
#define SubRdRd 133
#define SubRR 101
#define SubRRR 127
#define SubRsRs 140
#define SuperclassIndex 0
#define SuspendedContextIndex 1
#define TempReg 0
#define TheDisplay 14
#define TheFinalizationSemaphore 41
#define TheInputSemaphore null
#define TheInterruptSemaphore 30
#define TheLowSpaceSemaphore 17
#define TheTimerSemaphore 29
#define TrueObject 2
#define TstCqR 110
#define UnfailingPrimitive 3
#define UnimplementedOperation 2
#define UnimplementedPrimitive -7
#define ValueIndex 1
#define VarBaseReg 3
#define XIndex 0
#define XorCqR 111
#define XorCwR 118
#define XorRdRd 137
#define XorRR 104
#define XorRsRs 144
#define YIndex 1
#define YoungSelectorInPIC -5
#define ZeroExtend16RR 155
#define ZeroExtend32RR 156
#define ZeroExtend8RR 154

